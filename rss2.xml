<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Suncio&#39;s Blog</title>
    <link>suncio.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 02 Oct 2020 06:02:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Important Statement</title>
      <link>suncio.github.io/2020/10/01/Important-Statement/</link>
      <guid>suncio.github.io/2020/10/01/Important-Statement/</guid>
      <pubDate>Fri, 02 Oct 2020 05:47:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This blog is currently being reorganized. My recent projects and study notes will be posted to github/suncio repositories.&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p>This blog is currently being reorganized. My recent projects and study notes will be posted to github/suncio repositories.</p>]]></content:encoded>
      
      <comments>suncio.github.io/2020/10/01/Important-Statement/#disqus_thread</comments>
    </item>
    
    <item>
      <title>《盖特露德》节选与遐思</title>
      <link>suncio.github.io/2018/05/24/%E3%80%8A%E7%9B%96%E7%89%B9%E9%9C%B2%E5%BE%B7%E3%80%8B%E8%8A%82%E9%80%89%E4%B8%8E%E9%81%90%E6%80%9D/</link>
      <guid>suncio.github.io/2018/05/24/%E3%80%8A%E7%9B%96%E7%89%B9%E9%9C%B2%E5%BE%B7%E3%80%8B%E8%8A%82%E9%80%89%E4%B8%8E%E9%81%90%E6%80%9D/</guid>
      <pubDate>Fri, 25 May 2018 03:53:38 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;大概是这本书里最喜欢的片段：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>大概是这本书里最喜欢的片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">“您是病了，亲爱的先生，”他断然地说。“也许只是身体有病，那倒不要紧。您必须到乡下去，要干重活，不吃肉食。不过我估计，还有其他原因，您患的是忧郁症。” </div><div class="line">“您是这么认为么？” </div><div class="line">“是的，您是病了，患了一种时髦病，人们每天都可以碰到生这种病的聪明人。医生们对此简直毫无办法。这种情况是一种神经错乱变来的，人们也可以称之为个人主义或是假想的孤独感。当前的时髦书籍里讲的尽是这些事。您沉迷于自己的幻觉之中，您自以为孤独，没有人和您有关联，没有人了解你。情况是不是这样？” </div><div class="line">“是的，大致如此，”我惊讶地回答说。 </div><div class="line">“您看。对于一个曾经患过病的人来说，几次失望经历就足以使他相信，在他和其他人之间不存在任何关系，至多也只是互相误解而已，于是这个人就变成绝对孤独，对其他人不能真正理解，和他们不存在共同的东西，并且毫无关系。情况往往是这样的，这个病人越来越傲慢，他和其他健康人之间倘若还可能存在互相理解和互相爱慕的感情的话，那也只是牲畜之间的关系。倘若这种毛病变得普遍化，那么人类也就要灭绝了。还好，这个毛病只发生在欧洲，只发生在较高层的社会人士之中。青年人患这种病完全可以治愈，它甚至属于发育时期年轻人的不可避免的毛病。” </div><div class="line">他这种略带嘲弄的教训使我有点生气。他脸上毫无笑容，没有一点替我辩护的表情，后来却又重新露出了十分关切的善良模样。 </div><div class="line">“请您原谅，”他友好地说，“您患的就是这种毛病。我并不是开玩笑。不过的确也有治愈它的良药。那种认为我和您之间并无桥梁沟通，认为人人都是孤独和不可理解的看法纯粹是一种狂想。恰恰相反，人类的共同之处，较之每个人为了他个人，因而和其他人相区别之处是更为多得多，并且也更为重要得多。” </div><div class="line">“情况可能如此，”我回答道，“但是我知道这些又有什么用处呢？我又不是哲学家，而且我的痛苦并非由于找不到真理而产生的。我并不想成为圣人和思想家，我只希望能够过一种单纯的、比较满意和轻松的生活。” </div><div class="line">“好，您试试吧！您不要再啃书本，不要钻研理论，不过您一定要信任医生，直至您痊愈为止。您愿意这么做吗？” </div><div class="line">“我很愿意试一试。” </div><div class="line">“这样就好。倘若您只是身体有病，医生就会向您建议，或是沐浴，或是服药，或是去海滨疗养，也许您不理解，为什么要这样干，这些办法会有帮助吗，不过您总应该先去试一试，看看结果如何。您现在就按我的建议去试试吧！您得下功夫学会遇事先想到别人，然后再想着自己！这是恢复健康的独一无二的道路。” </div><div class="line">“我该怎么做才好呢？每个人总是首先想到他自己的。” </div><div class="line">“您必须下决心克服。您必须对自己的舒适快活抱一定的冷淡态度。您必须学会这么思考问题：事情全在我自己！目前您只有这个办法：您必须学会爱其他任何人，把他人的幸福看得比您自己的幸福更重要。我的意思可不是要您去谈恋爱！我的意思正好恰恰相反！” </div><div class="line">“我懂。可是我该同谁去作试验呢？” </div><div class="line">“您就从自己身边找对象，朋友也行，亲戚也行。您想一想您的母亲。她失去了依靠，现在很孤单，需要有人安慰。您去照顾她，替她着想，您要试着去做一些对她有益的事情。” </div><div class="line">“我母亲和我相互不太了解，做起来恐怕有困难。” </div><div class="line">“嗯，是的，倘若决心不够，当然是行不通的！您还没有弄通我这些老调陈词！您不能总是想他不了解您或者您不了解他，你们也许真的不大合拍。可是您要让自己首先尝试着去了解别人，让别人觉得愉快，让别人觉得合拍！您这就着手去做吧，就从您母亲开始！——您必须首先对自己说：生活并不使我快活，这方面或者那方面，那么我为什么不能设法去改变它呢！难道您已经对自己的生活失去了爱，再也不留恋生活，把它看成是一种负担，没有一点儿愉快了！” </div><div class="line">“我要试一试的。您说得对，我无论怎么做结果总是一样。我为什么不按您所建议的去做呢？” </div><div class="line">我理解他的话语中包藏的意义，使我惊讶的是这些话同我和父亲最后一次会见时父亲告诉我的处世哲学完全一致；活着是为了别人，不要把自己看得太重！这种说教和我的感情相抵触，它们总有点儿教义问答和宗教课程的味道，而我呢，象每个健康的青年人一样，对此道既厌恶，又敬畏。可是我最终没有把它们看成是一种理论或者是世界观，而纯粹是一种实践的经验，为了忍受沉重的生活，我愿意试一试。</div></pre></td></tr></table></figure><p>这本书是1910年出版的，开始过了这么多年，似乎许多青年人的烦恼未曾变过，也许形式或诱因不太一样，但是孤独大概是披着不同外衣的同一只狼，在不同的时空吞噬着优秀的心灵与灵魂。大概愈是有感于世界的美丽与浩渺，愈是不甘于自我的卑微与孤独，可是世界也是一样孤独，我们有幸和这个宇宙一起孤独。</p><p>最近很多学校里的朋友说不想与别人交流，觉得谈不来，大概潜意识里总是带着些许傲慢的。但是想一想，不思考的人信奉随便的一种目标；思考的人若是承认“存在先于本质”，也要从事于任一一种目标。这芸芸众生，我们都一样愚昧，也一样优秀。茫茫的星际之间，除了这些同胞，我们没有别的灵魂可以聊以慰籍；璀璨的银河之内，除了我们大家，我们没有别的爱与栖息。所以，即使承认了阶级、智力、肉体各种差距，为什么要放弃对任何一个灵魂的救赎。</p><p>所以你看：每个人都从相同的起点出发，我们已经活的太久了，可是我还有过多的时间；我们看上去那么苍老，可是我的灵魂依然幼稚。</p>]]></content:encoded>
      
      <comments>suncio.github.io/2018/05/24/%E3%80%8A%E7%9B%96%E7%89%B9%E9%9C%B2%E5%BE%B7%E3%80%8B%E8%8A%82%E9%80%89%E4%B8%8E%E9%81%90%E6%80%9D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ruskell &amp; Algorithms (2) -- FFT</title>
      <link>suncio.github.io/2017/12/09/Ruskell-Algorithms-2-FFT/</link>
      <guid>suncio.github.io/2017/12/09/Ruskell-Algorithms-2-FFT/</guid>
      <pubDate>Sun, 10 Dec 2017 07:27:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是一个利用Rust&amp;amp;Haskell实现算法导论上的经典算法或其他有趣算法的系列，代码可以点击此&lt;a href=&quot;https://play.rust-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线运行&lt;/a&gt;得到结果，你可能
        
      
      </description>
      
      <content:encoded><![CDATA[<p>这是一个利用Rust&amp;Haskell实现算法导论上的经典算法或其他有趣算法的系列，代码可以点击此<a href="https://play.rust-lang.org/" target="_blank" rel="external">在线运行</a>得到结果，你可能需要补充合理的输入输出与main函数。<br>第一篇是实现FFT与普通多项式乘法，下面是相应的Rust代码：</p><p>首先是FFT算法<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dft</span></span>(src: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;Complex&lt;<span class="built_in">f64</span>&gt;&gt;, flag: <span class="built_in">bool</span>) &#123;</div><div class="line"><span class="comment">// src 的长度为 2 的幂； flag 为 false 时计算 DFT， 为 true 时计算逆 DFT</span></div><div class="line"><span class="keyword">let</span> len = src.len();</div><div class="line"><span class="keyword">let</span> s = len.trailing_zeros();</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..len &#123;</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..s &#123;</div><div class="line">k |= ((i &gt;&gt; j) &amp; <span class="number">1</span>) &lt;&lt; (s - <span class="number">1</span> - j);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> i &lt; k &#123;</div><div class="line">src.swap(i, k);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..s &#123;</div><div class="line"><span class="keyword">let</span> base = (<span class="number">2</span> &lt;&lt; i) <span class="keyword">as</span> <span class="built_in">usize</span>;</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> j = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> j &lt; len &#123;</div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>..(base / <span class="number">2</span>) &#123;</div><div class="line"><span class="keyword">let</span> w = <span class="keyword">if</span> flag &#123;</div><div class="line">Complex::from_polar(&amp;<span class="number">1.0</span>, &amp;(-<span class="number">2.0</span> * <span class="built_in">f64</span>::consts::PI * k <span class="keyword">as</span> <span class="built_in">f64</span> / base <span class="keyword">as</span> <span class="built_in">f64</span>))</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">Complex::from_polar(&amp;<span class="number">1.0</span>, &amp;(<span class="number">2.0</span> * <span class="built_in">f64</span>::consts::PI * k <span class="keyword">as</span> <span class="built_in">f64</span> / base <span class="keyword">as</span> <span class="built_in">f64</span>))</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> t = w * src[base / <span class="number">2</span> + j + k];</div><div class="line"><span class="keyword">let</span> u = src[j + k];</div><div class="line">src[j + k] = u + t;</div><div class="line">src[base / <span class="number">2</span> + j + k] = u - t;</div><div class="line">&#125;</div><div class="line">j += base;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> flag &#123;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..len &#123;</div><div class="line">src[i] = src[i] / len <span class="keyword">as</span> <span class="built_in">f64</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">poly_mult_fft</span></span>(a: &amp;[<span class="built_in">f64</span>], b: &amp;[<span class="built_in">f64</span>]) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">f64</span>&gt; &#123;</div><div class="line"><span class="keyword">let</span> len = <span class="number">1</span> &lt;&lt; (<span class="number">32</span> - ((a.len() + b.len()) <span class="keyword">as</span> <span class="built_in">i32</span>).leading_zeros());</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> aa: <span class="built_in">Vec</span>&lt;Complex&lt;<span class="built_in">f64</span>&gt;&gt; = <span class="built_in">vec!</span>[Complex &#123;re: <span class="number">0.0</span>, im: <span class="number">0.0</span>&#125;; len];</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..a.len() &#123;</div><div class="line">aa[i].re = a[i];</div><div class="line">&#125;</div><div class="line">dft(&amp;<span class="keyword">mut</span> aa, <span class="literal">false</span>);</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> bb: <span class="built_in">Vec</span>&lt;Complex&lt;<span class="built_in">f64</span>&gt;&gt; = <span class="built_in">vec!</span>[Complex &#123;re: <span class="number">0.0</span>, im: <span class="number">0.0</span>&#125;; len];</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..b.len() &#123;</div><div class="line">bb[i].re = b[i];</div><div class="line">&#125;</div><div class="line">dft(&amp;<span class="keyword">mut</span> bb, <span class="literal">false</span>);</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..len &#123;</div><div class="line">aa[i] *= bb[i];</div><div class="line">&#125;</div><div class="line">dft(&amp;<span class="keyword">mut</span> aa, <span class="literal">true</span>);</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> c = <span class="built_in">Vec</span>::new();</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..(a.len() + b.len() - <span class="number">1</span>) &#123;</div><div class="line">c.push(aa[i].re);</div><div class="line">&#125;</div><div class="line">c</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后是普通乘法<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">poly_mult_norm</span></span>(a: &amp;[<span class="built_in">f64</span>], b: &amp;[<span class="built_in">f64</span>]) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">f64</span>&gt; &#123;</div><div class="line"><span class="keyword">let</span> al = a.len();</div><div class="line"><span class="keyword">let</span> bl = b.len();</div><div class="line"><span class="keyword">let</span> cl = al + bl - <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> c = <span class="built_in">vec!</span>[<span class="number">0.0</span>; cl];</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..cl &#123;</div><div class="line"><span class="keyword">let</span> k = <span class="keyword">if</span> i + <span class="number">1</span> &lt; bl &#123; <span class="number">0</span> &#125; <span class="keyword">else</span> &#123; i + <span class="number">1</span> - bl &#125;;</div><div class="line"><span class="keyword">let</span> m = <span class="keyword">if</span> i + <span class="number">1</span> &gt; al &#123; al &#125; <span class="keyword">else</span> &#123; i + <span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> k..m &#123;</div><div class="line">c[i] += a[j] * b[i - j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">c</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Note:</p><ol><li>需要<code>extern crate num</code>使用复数</li><li>FFT需要大约2000+的输入量才能发挥其数量级优势，否则被常数拖死，还没有普通乘法快</li></ol>]]></content:encoded>
      
      <comments>suncio.github.io/2017/12/09/Ruskell-Algorithms-2-FFT/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WSL + XShell</title>
      <link>suncio.github.io/2017/11/29/WSL-XShell/</link>
      <guid>suncio.github.io/2017/11/29/WSL-XShell/</guid>
      <pubDate>Wed, 29 Nov 2017 18:15:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;因为虚拟机炸了&lt;i&gt;（血的教训，告诉我们不要相信50G空间够你日摆一个操作系统）&lt;/i&gt;，加上CentOS的yum源的更新程度感天动地，就把工作环境迁移到WSL了。WSL使用体验整体良好，尽管有一些尚可接受的延迟。但是！配色瞎眼睛！这个配色开发者你们眼睛不会瞎吗？！&lt;br&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>因为虚拟机炸了<i>（血的教训，告诉我们不要相信50G空间够你日摆一个操作系统）</i>，加上CentOS的yum源的更新程度感天动地，就把工作环境迁移到WSL了。WSL使用体验整体良好，尽管有一些尚可接受的延迟。但是！配色瞎眼睛！这个配色开发者你们眼睛不会瞎吗？！<br>遂决定更改配色方案，由于之前连远程机器时习惯XShell的配色。就干脆开一个sshd，用本地回路在XShell上工作了，主要参考“<a href="https://memeda.github.io/%E6%8A%80%E6%9C%AF/2016/08/03/WslBashOnWindowsConfig.html" target="_blank" rel="external">Windows Subsystem for Linux(WSL)的配置</a>”这篇文章。<br>最后得到的结果似乎比直接开bash.exe还要快，而且配色也改善了很多。</p>]]></content:encoded>
      
      <comments>suncio.github.io/2017/11/29/WSL-XShell/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ruskell &amp; Algorithms (1) -- Matrix Chain Order</title>
      <link>suncio.github.io/2017/11/29/Ruskell-Algorithms-1-Matrix-Chain-Order/</link>
      <guid>suncio.github.io/2017/11/29/Ruskell-Algorithms-1-Matrix-Chain-Order/</guid>
      <pubDate>Wed, 29 Nov 2017 18:10:12 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是一个利用Rust&amp;amp;Haskell实现算法导论上的经典算法或其他有趣算法的系列（大概不会坑吧），所有代码可以点击此&lt;a href=&quot;https://play.rust-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线运行&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>这是一个利用Rust&amp;Haskell实现算法导论上的经典算法或其他有趣算法的系列（大概不会坑吧），所有代码可以点击此<a href="https://play.rust-lang.org/" target="_blank" rel="external">在线运行</a>得到结果。<br>第一篇是实现的利用动态规划解决矩阵链乘法问题的问题，下面是相应的Rust代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> time;</div><div class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rand;</div><div class="line"></div><div class="line"><span class="keyword">use</span> time::*;</div><div class="line"><span class="keyword">use</span> std::vec;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_optimal_parens</span></span>(<span class="comment">/*file:&amp;mut File, */</span>s:&amp;<span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt;&gt;, i:<span class="built_in">u32</span>, j:<span class="built_in">u32</span> ) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> i == j</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">print!</span>(<span class="string">"A&#123;&#125; "</span>, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">print!</span>(<span class="string">"( "</span>);</div><div class="line">        print_optimal_parens(s, i, s[i <span class="keyword">as</span> <span class="built_in">usize</span>][j <span class="keyword">as</span> <span class="built_in">usize</span>]);</div><div class="line">        print_optimal_parens(s, s[i <span class="keyword">as</span> <span class="built_in">usize</span>][j <span class="keyword">as</span> <span class="built_in">usize</span>]+<span class="number">1</span>, j);</div><div class="line">        <span class="built_in">print!</span>(<span class="string">") "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">matrix_chain_order</span></span>(p:&amp;<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt;) -&gt; (<span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt;&gt;, <span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt;&gt;)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> n = p.len() - <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m:<span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt;&gt; = <span class="built_in">Vec</span>::with_capacity(n+<span class="number">1</span>);</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s:<span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt;&gt; = <span class="built_in">Vec</span>::with_capacity(n+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..n+<span class="number">1</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> temp:<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt; = <span class="built_in">Vec</span>::with_capacity(n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..n+<span class="number">1</span></div><div class="line">        &#123;</div><div class="line">            temp.push(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        m.push(temp);</div><div class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> temp:<span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt; = <span class="built_in">Vec</span>::with_capacity(n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..n+<span class="number">1</span></div><div class="line">        &#123;</div><div class="line">            temp.push(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        s.push(temp);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="number">2</span>..n+<span class="number">1</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..n-l+<span class="number">2</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">let</span> j:<span class="built_in">usize</span> = i+l-<span class="number">1</span>;</div><div class="line">            m[i][j] = std::<span class="built_in">u32</span>::MAX;</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> i..j</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">let</span> temp:<span class="built_in">u32</span> = p[i-<span class="number">1</span>]* p[k] * p[j];</div><div class="line">                <span class="keyword">let</span> q:<span class="built_in">u32</span> = m[i][k] + m[k+<span class="number">1</span>][j] + temp;</div><div class="line">                <span class="keyword">if</span> q &lt; m[i][j]</div><div class="line">                &#123;</div><div class="line">                    m[i][j] = q;</div><div class="line">                    s[i][j] = k <span class="keyword">as</span> <span class="built_in">u32</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    (s, m)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> vec = <span class="built_in">Vec</span>::new();</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">31</span> <span class="comment">//generate n+1 (n=30) numbers</span></div><div class="line">    &#123;</div><div class="line">        vec.push(rand::random::&lt;<span class="built_in">u32</span>&gt;() % <span class="number">100</span> + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> start = time::now();</div><div class="line">    <span class="keyword">let</span> (s, m) = matrix_chain_order(&amp;vec);</div><div class="line">    </div><div class="line">    <span class="built_in">println!</span>(<span class="string">"s:"</span>);</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..s.len()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..s[i].len()</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">print!</span>(<span class="string">"&#123;&#125;  "</span>, s[i][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">println!</span>(<span class="string">"  new line "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">println!</span>(<span class="string">"m:"</span>);</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..m.len()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..m[i].len()</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">print!</span>(<span class="string">"&#123;&#125;  "</span>, m[i][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">println!</span>(<span class="string">"  new line  "</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">let</span> end = time::now();</div><div class="line"><span class="keyword">let</span> dura = end - start; </div><div class="line"><span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, dura);  </div><div class="line">    print_optimal_parens(&amp;s, <span class="number">1</span>, s.len() <span class="keyword">as</span> <span class="built_in">u32</span> - <span class="number">1</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Note:</p><ol><li>有一个小坑是关于time的，似乎是由于实现原因，不能用占位符{}打印time，需要用debug下的{:?}来打印时间。</li><li>Rust的变量生存周期跟c系列还是挺不一样的，写的时候略微有些不习惯</li></ol>]]></content:encoded>
      
      <comments>suncio.github.io/2017/11/29/Ruskell-Algorithms-1-Matrix-Chain-Order/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SCC17 experience on spot</title>
      <link>suncio.github.io/2017/11/16/SCC17-experience/</link>
      <guid>suncio.github.io/2017/11/16/SCC17-experience/</guid>
      <pubDate>Thu, 16 Nov 2017 18:56:03 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;“我真傻，真的，”赛场的我抬起我没有神采的眼睛来，接着说。“我单知道去年的时候CPU会被超微忘记运，让我们搭不起系统来；我不知道风扇也会。我们早早地就接着题目，拿出笔记本，开始优化代码和编译运行。应用是很听话的，我们编译运行优化测试都没有问题；我们出发了。等到了现场，我就在
        
      
      </description>
      
      <content:encoded><![CDATA[<p>“我真傻，真的，”赛场的我抬起我没有神采的眼睛来，接着说。“我单知道去年的时候CPU会被超微忘记运，让我们搭不起系统来；我不知道风扇也会。我们早早地就接着题目，拿出笔记本，开始优化代码和编译运行。应用是很听话的，我们编译运行优化测试都没有问题；我们出发了。等到了现场，我就在摆弄着这可人的机器，Intel Xeon Platinum 8176 Scalable <em> 6，Nvidia Tesla V100 </em> 12，插上了卡，要装好机器， 装上系统。我测应用，一切都好好的罢，便测测Linpack看，47，我便心欢欢的去睡了。到了比赛开始前，要测HPCG和HPL了，我运行一看，只见GPU温度蹭蹭的往上彪，眼看着47的数值掉到了24，没有见我们的风扇了。风扇是不运到别家去的；到超微去一问，竟然没有运。我们急了，央人带过来。直到比赛开始第二天，催来催去超微才送来我们的八个风扇，可这时组委会却不让改硬件了。大家都说，糟了，怕是比赛凉了。再测测；GPU果然掉了近半的性能，原本的主频已经降得不成样子，上面还跑着本应拿满分的Born呢。……”我接着但是呜咽，说不出成句的话来。</p><p>倘一看见别人提交了Mr.Bayes，隔壁应用就说：“诶诶，你看看我们的Mr.Bayes，若是像他们一样，丢在云上跑着不动，便不会数据污染，现在大约也已经跑到满分了罢……”</p>]]></content:encoded>
      
      <comments>suncio.github.io/2017/11/16/SCC17-experience/#disqus_thread</comments>
    </item>
    
    <item>
      <title>人活着就是为了四川辣酱</title>
      <link>suncio.github.io/2017/10/31/%E4%BA%BA%E6%B4%BB%E7%9D%80%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E5%9B%9B%E5%B7%9D%E8%BE%A3%E9%85%B1/</link>
      <guid>suncio.github.io/2017/10/31/%E4%BA%BA%E6%B4%BB%E7%9D%80%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E5%9B%9B%E5%B7%9D%E8%BE%A3%E9%85%B1/</guid>
      <pubDate>Tue, 31 Oct 2017 23:19:10 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;贴一篇很有意思的&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30099678&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎文章&lt;/a&gt;，关于《rick and morty》提到的四川辣酱在十月份在美国引起的一系列事件以
        
      
      </description>
      
      <content:encoded><![CDATA[<p>贴一篇很有意思的<a href="https://zhuanlan.zhihu.com/p/30099678" target="_blank" rel="external">知乎文章</a>，关于《rick and morty》提到的四川辣酱在十月份在美国引起的一系列事件以及背后的哲学沉思。</p><p>“存在先于本质”，应当是萨特对于存在最知名的论断了吧，有意思的是，萨特还是提出了“自为的存在”的，他还是相信人的意义存在于人的“自在的存在”之后的行为之中的。可是，你看看在这之后这些荒诞主义者都干了什么，他们消解了存在之意义，并宣称对意义的追寻是对真相的逃避。存在的形式就寓于西西弗斯永无止境的徒劳之中，其本质就像其形式一样荒诞，并无意义可言。自在的存在与自为的存在同样消逝与时间当中，亦如海德格尔所说，一切存在归于时间的视野。</p><p>可是时间，多么奇妙而又残酷的度量。我至今没能很好的理解相对论，更遑论量子力学，不禁好奇在学物理的人的眼中，纠结在一起的时空究竟会具象化成怎样的图景，从宏观到微观，意识与时间究竟应该被如何度量。也许我只是一个渺小的被卷入时间洪流的三维生物，耗费了自己本就有限的单向维度写下这些没有意义的文字。可是想一想引力波都被实验观测到了，我们的时空可以被扭曲可是光速不变，也许这真的是规律对意义的昭示也说不定呢。</p><p>又想到了大刘在《球状闪电》里提到说，花费一生去追求某样东西吧，并由此度过一个充实而又幸福的人生。那么，从今往后，活着就是为了四川辣酱。</p><p>最后贴上我最喜欢的诗之一的片段做结尾好了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">我的呼吸</div><div class="line">一直在证明</div><div class="line">树叶飘飘</div><div class="line">我不能放弃幸福</div><div class="line">或相反</div><div class="line">我以痛苦为生</div><div class="line">埋葬半截</div><div class="line">来到村口或山上</div><div class="line">我盯住人们死看</div><div class="line">呀, 生硬的黄土 人丁兴旺</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>suncio.github.io/2017/10/31/%E4%BA%BA%E6%B4%BB%E7%9D%80%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E5%9B%9B%E5%B7%9D%E8%BE%A3%E9%85%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Notes and Harmony</title>
      <link>suncio.github.io/2017/10/26/Notes-and-Harmony/</link>
      <guid>suncio.github.io/2017/10/26/Notes-and-Harmony/</guid>
      <pubDate>Fri, 27 Oct 2017 04:27:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This passage is about basic knowledge of how to choose notes in scale due to harmony when improvising.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;chord
        
      
      </description>
      
      <content:encoded><![CDATA[<p>This passage is about basic knowledge of how to choose notes in scale due to harmony when improvising.</p><table><thead><tr><th>chord</th><th>mode</th><th>scale</th><th>avoided note</th></tr></thead><tbody><tr><td>大七</td><td>Ionian</td><td>1、2、3、4、5、6、7、1</td><td>4</td></tr><tr><td></td><td>Lydian</td><td>1、2、3、#4、5、6、7、1</td><td>无</td></tr><tr><td>小七</td><td>Dorian</td><td>1、2、b3、4、5、6、b7、1</td><td>6</td></tr><tr><td></td><td>旋律小调</td><td>1、2、b3、4、5、6、7、1</td><td>无</td></tr><tr><td></td><td>Aeolian</td><td>1、2、b3、4、5、b6、b7、1</td><td>b6</td></tr><tr><td>属七</td><td>Mixolydian</td><td>1、2、3、4、5、6、b7、1</td><td>4</td></tr><tr><td></td><td>半全减音阶</td><td>1、b2、#2、3、#4、5、6、b7、1</td><td>无</td></tr><tr><td></td><td>Altered(变属)</td><td>1、b2、#2、3、b5、b6、b7、1</td><td>无</td></tr><tr><td></td><td>小调Blues</td><td>1、b3、4、#4、5、b7、1</td><td>无</td></tr><tr><td></td><td>大调Blues</td><td>1、2、#2、3、5、6、1</td><td>无</td></tr><tr><td>增七</td><td>全音阶</td><td>1、2、3、b5、b6、b7、1</td><td>无</td></tr><tr><td>减七</td><td>减音阶</td><td>1、2、b3、4、b5、b6、6、7、1</td><td>无</td></tr><tr><td>半减七</td><td>Locrian</td><td>1、b2、b3、4、b5、b6、b7、1</td><td>b2</td></tr><tr><td></td><td>Locrian2</td><td>1、2、b3、4、b5、b6、b7、1</td><td>无</td></tr><tr><td>小大七</td><td>旋律小调</td><td>1、2、b3、4、5、6、7、1</td><td>无</td></tr><tr><td>属7sus4</td><td>Mixolydian</td><td>1、2、3、4、5、6、b7、1</td><td>3</td></tr><tr><td>增大七</td><td>Lydian#5</td><td>1、2、3、#4、#5、6、7、1</td><td>无</td></tr><tr><td>大六</td><td>Ionian</td><td>1、2、3、4、5、6、7、1</td><td>4</td></tr><tr><td></td><td>大调五声</td><td>1、2、3、5、6、1</td><td>无</td></tr><tr><td>小六</td><td>旋律小调</td><td>1、2、b3、4、5、6、7、1</td><td>无</td></tr><tr><td></td><td>小调五声</td><td>1、b3、4、5、6、1</td><td>无</td></tr></tbody></table>]]></content:encoded>
      
      <comments>suncio.github.io/2017/10/26/Notes-and-Harmony/#disqus_thread</comments>
    </item>
    
    <item>
      <title>II-V-I chord processing</title>
      <link>suncio.github.io/2017/10/26/II-V-I-chord-processing/</link>
      <guid>suncio.github.io/2017/10/26/II-V-I-chord-processing/</guid>
      <pubDate>Fri, 27 Oct 2017 04:18:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This passage is mainly about commonly used II-V-I chord processions in music.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;II-IV-I&lt;br&gt;II-IV-I may be the most com
        
      
      </description>
      
      <content:encoded><![CDATA[<p>This passage is mainly about commonly used II-V-I chord processions in music.<br><br></p><ol><li>II-IV-I<br>II-IV-I may be the most common chord procession played in jazz. In key C, it’s D-7, G7, Cmaj7.</li></ol><ul><li>Minor 7th chords are II chords.</li><li>Dominant 7th chords are V chords.</li><li>Major 7th chords are I chords.</li></ul><ol start="2"><li><p>voice leading<br><a href="https://en.m.wikipedia.org/wiki/Voice_leading" target="_blank" rel="external">wikipedia</a>: “Voice leading is the term used to describe the linear progression of melodic lines and their interaction with one another to create harmonies, according to the principles of common-practice harmony and counterpoint”<br>In II-IV-I processions, notice that as you go from the II chord to the V chord to the I chord, the 7th of each chord resolves down a half step and becomes the 3rd of the next chord. This is basic voice leading. Voice leading is the direction a particular note wants to go. It’s almost as if there is a gravitational or magnetic pull on the 7th, urging it to resolve down a half-step.</p></li><li><p>Use II-V-I to change key a step down<br>For example, Dm-G-C-Cm-F-Bb could change key from C to Bb. Simply changing 3rd note of chord C a half-step down makes it Cm, in other word, I(C) becomes II(Bb). Then key in C becomes key in Bb.</p></li></ol>]]></content:encoded>
      
      <comments>suncio.github.io/2017/10/26/II-V-I-chord-processing/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
